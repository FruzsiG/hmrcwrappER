}
my_df %>% group_by(value.CommodityId) %>%
mutate(value.CommodityId = value.CommodityId/(-10))
my_df %>% group_by(value.CommodityId) -> my_df
if(length(intersect(c("hs2"), groupby)) > 0){
my_df %>% group_by(value.CommodityId) -> my_df
}
if("country" %in% groupby){
my_df %>% mutate(CountryCodeAlpha = "EU_Estimate") -> my_df
}
if("year" %in% groupby){
my_df %>% mutate(Year = str_sub(value.MonthId, 1,4)) %>%
group_by(Year)-> my_df
}
if("month" %in% groupby){
my_df %>% mutate(Month = str_sub(value.MonthId, 5,6)) %>%
group_by(Month)-> my_df
}
my_df %>% summarise(NetMass = sum(value.NetMass), Value = sum(value.Value))%>%
ungroup() -> df
View(df)
groupby = c("HS2", "country", "year", "month" )
time_window = "MonthId gt 201906 and MonthId lt 202008"
#Pleas note EU estimates only apply on the HS2 level and to the whole of the EU
base <-"https://api.uktradeinfo.com/"
library(dplyr)
library(stringr)
library(httr)
library(jsonlite)
library(htmlTable)
endpoint = "ots"
query <- paste0("?$apply=filter(",
time_window, " and CommodityId lt 0)")
full_url <- paste0(base, endpoint, gsub(" ","%20", query))
message("Your query is : ", full_url)
req <- httr::GET(full_url)
json_content <- httr::content(req, as = "text", encoding = "UTF-8")
my_df <- jsonlite::fromJSON(json_content, flatten = TRUE) %>%
data.frame() %>%
the_string = c("value.FlowTypeId")
my_df <- jsonlite::fromJSON(json_content, flatten = TRUE) %>%
data.frame()
the_string = c("value.FlowTypeId")
if(!is.null(groupby)){
groupby <- tolower(groupby)
if(length(intersect(c("hs2"), groupby)) > 0){
the_string <- c(the_string, "value.CommodityId")
}
if("country" %in% groupby){
my_df %>% mutate(CountryCodeAlpha = "EU_Estimate") -> my_df
}
if("year" %in% groupby){
my_df %>% mutate(Year = str_sub(value.MonthId, 1,4)) -> my_df
the_string <- c(the_string, "Year")
}
if("month" %in% groupby){
my_df %>% mutate(Month = str_sub(value.MonthId, 5,6))-> my_df
the_string <- c(the_string, "Month")
}
}
my_df %>% group_by(the_string)%>%
summarise(NetMass = sum(value.NetMass),
Value = sum(value.Value))%>%
ungroup() -> df
my_df %>% group_by(vars(the_string))%>%
summarise(NetMass = sum(value.NetMass),
Value = sum(value.Value))%>%
ungroup() -> df
my_df %>% group_by( .dots = (the_string))%>%
summarise(NetMass = sum(value.NetMass),
Value = sum(value.Value))%>%
ungroup() -> df
View(df)
View(my_df)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_hs_hmrc_ots_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", flow_filter = "EXport", groupby = c("HS2")) -> my_outie
View(my_outie)
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'hs', groupby = c("HS2")) -> eu_corr
View(eu_corr)
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'hs', groupby = c("HS2")) -> eu_corr
View(eu_corr)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'hs', groupby = c("HS2")) -> eu_corr
View(eu_corr)
str(eu_corr)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'hs', groupby = c("HS2")) -> eu_corr
View(eu_corr)
prettyNum(1, zero.print = TRUE)
prettyNum(1, flag = "0")
prettyNum(c(1,58, 3, 72), flag = "0")
sprintf("%02d", c(1,58, 3, 72))
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'hs', groupby = c("HS2")) -> eu_corr
View(eu_corr)
View(my_outie)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'hs', groupby = c("HS2")) -> eu_corr
View(eu_corr)
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'sitc', groupby = c("country", "year")) -> eu_corr
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'sitc', groupby = c("country", "year", "HS2")) -> eu_corr
View(eu_corr)
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS4", "COUNTRY"))
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS4", "COUNTRY")) -> out1
View(out1)
mpg
cars
cars1 = select(cars, -1)
merge(cars, cars1)
cars
cars1
merge(cars, cars1) -> cars2
View(cars2)
?mege
?merge
merge(cars, cars1, all = TRUE) -> cars2
merge(cars, cars1, all.x =  = TRUE) -> cars2
merge(cars, cars1, all.x = TRUE) -> cars2
?rbind.fill
?rbind2
?rbind.data.frame
merge(data.frame(cars, row.names=NULL), data.frame(cars1, row.names=NULL),
by = 0, all = TRUE)[-1] -> cars2
rbind(cars, cars1)
rbind_all(cars, cars1)
library(tidyverse)
rbind.fill(cars, cars1)
rbind.fill(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
plyr::rbind.fill(mtcars[c("mpg", "wt")], mtcars[c("wt", "cyl")])
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'sitc', groupby = c("country", "year", "HS2")) -> eu_corr
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'sitc', groupby = c("country", "year", "HS2")) -> eu_corr
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", flow_filter = "EXport", groupby = c("year"))-> out2
View(out2)
call_sitc_hmrc_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", flow_filter = "EXport", groupby = c("year", "country"))-> out2
call_sitc_hmrc_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", country_filter = "FR", flow_filter = "EXport", groupby = c("year", "country"))-> out2
call_sitc_hmrc_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", country_filter = "FR", flow_filter = "EXport", groupby = c("year", "country", "month"))-> out2
call_sitc_hmrc_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", flow_filter = "EXport", groupby = c("year", "country", "month"))-> out2
?call_hs_hmrc_ots_with_key_word_search
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("CN8", "COUNTRY"))
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("CN8", "COUNTRY")) ->out2
View(out2)
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("hs2", "COUNTRY")) ->out2
call_hs_hmrc_ots_with_key_word_search(filter_agg = "cn8", time_window = "MonthId eq 201901", groupby = c("hs4", "country"))
call_hs_hmrc_ots_with_key_word_search(filter_agg = "cn8", time_window = "MonthId eq 201901", groupby = c("hs4", "country")) -> out2
View(out2)
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("hs2", "COUNTRY")) ->out2
View(out2)
colnames(out2)
unique(out2$value.Commodity.Hs2Code)
unique(out2$value.Commodity.Hs2Code)%>% pull()
unique(out2$value.Commodity.Hs2Code)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("hs2", "COUNTRY")) ->out2
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("hs2", "COUNTRY")) ->out2
View(out2)
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", flow_filter = "EXport", groupby = c("hs2", "COUNTRY")) ->out2
call_hs_hmrc_ots_with_key_word_search(filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", flow_filter = "EXport", groupby = c("hs2", "COUNTRY")) ->out2
call_hs_hmrc_ots_with_key_word_search(filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", flow_filter = "EXport", groupby = c("COUNTRY")) ->out2
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_with_key_word_search(key_word = "cheese", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "rts", groupby = c("year", "COUNTRY"))
call_sitc_hmrc_with_key_word_search(key_word = "cheese", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "ots", groupby = c("year", "COUNTRY"))
library(hmrcwrappeR)
call_sitc_hmrc_with_key_word_search(key_word = "cheese", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "ots", groupby = c("year", "COUNTRY"))
call_sitc_hmrc_with_key_word_search(filter_agg = "sitc0", time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY")) -> out2
filter_agg = "sitc0"
time_window = "MonthId gt 201906 and MonthId lt 202008"
endpoint = "ots"
country_filter = "FR"
low_filter = "EXport"
flow_filter = "EXport"
groupby = c("SITc2", "COUNTRY")
base <-"https://api.uktradeinfo.com/" #https://frontdoor-hmrcukti-uat.azurefd.net/"
endpoint = tolower(endpoint)
#This is where you select "ots" for Overseas Trade Statistics and "rts" for Regional Trade statistics
if(!(endpoint %in% c("ots", "rts"))){
print("Choose endpoint value as 'ots' or 'rts' ")
return()
}
if(!(filter_agg %in% c("sitc1", "sitc2", "sitc3", "sitc4") & endpoint == "ots") & !(filter_agg %in% c("sitc1", "sitc2") & endpoint == "rts")){
print("Invalid product code format try again!")
return()
}
filter_agg = tolower(filter_agg)
#This is where you select "ots" for Overseas Trade Statistics and "rts" for Regional Trade statistics
if(!(endpoint %in% c("ots", "rts"))){
print("Choose endpoint value as 'ots' or 'rts' ")
return()
}
if(!(filter_agg %in% c("sitc1", "sitc2", "sitc3", "sitc4") & endpoint == "ots") & !(filter_agg %in% c("sitc1", "sitc2") & endpoint == "rts")){
print("Invalid product code format try again!")
return()
}
filter_agg
filter_agg = "sitc1"
call_sitc_hmrc_with_key_word_search(filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY")) -> out2
View(out2)
call_sitc_hmrc_with_key_word_search(filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots",  flow_filter = "EXport", groupby = c("SITc2", "COUNTRY")) -> out2
call_sitc_hmrc_with_key_word_search(filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots",  flow_filter = "EXport", groupby = c("year", "COUNTRY")) -> out2
call_sitc_hmrc_with_key_word_search(key_word = "cheese" filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots",  flow_filter = "EXport", groupby = c("year", "COUNTRY")) -> out2
call_sitc_hmrc_with_key_word_search(key_word = "cheese", filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots",  flow_filter = "EXport", groupby = c("year", "COUNTRY")) -> out2
call_sitc_hmrc_with_key_word_search(key_word = "cheese", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "rts", groupby = c("sitc4", "COUNTRY"))
key_word = "cheese"
base <-"https://api.uktradeinfo.com/" #https://frontdoor-hmrcukti-uat.azurefd.net/"
endpoint = tolower(endpoint)
filter_agg = tolower(filter_agg)
#This is where you select "ots" for Overseas Trade Statistics and "rts" for Regional Trade statistics
if(!(endpoint %in% c("ots", "rts"))){
print("Choose endpoint value as 'ots' or 'rts' ")
return()
}
if(!(filter_agg %in% c("sitc1", "sitc2", "sitc3", "sitc4") & endpoint == "ots") & !(filter_agg %in% c("sitc1", "sitc2") & endpoint == "rts")){
print("Invalid product code format try again!")
return()
}
if( is.null(time_window)){
print("You have to specify a time window!")
return()
} else {
filter_crit = time_window #paste0(time_window, " and CommoditySITCId ge 0 and SuppressionIndex eq 0")
if(endpoint == "ots"){
filter_crit = paste0(time_window, " and CommoditySitcId ge 0 and SuppressionIndex eq 0")
}
}
if(!is.null(key_word)){
filter_crit = paste0(filter_crit, " and contains(SITC/",filter_agg,"Desc, '",key_word,"')")
}
#Country filter is not compulsory
if(!is.null(country_filter)){
if(nchar(trimws(country_filter)) == 2){
filter_crit <- paste0(filter_crit, " and Country/CountryCodeAlpha eq '", country_filter, "'")
} else {
print("Please use ISO2-Alpha country code e.g. 'FR'.")
return()
}
}
#flow filter also not compulsory
if(!is.null(flow_filter)){
flow_filter = tolower(flow_filter)
if(flow_filter == "import"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 1 or FlowTYpeId eq 3)")
} else if(flow_filter == "export"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 2 or FlowTYpeId eq 4)")
} else if(flow_filter == "eu"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 1 or FlowTYpeId eq 2)")
} else {
print("Ambiguous flow type please specify 'import', 'export', 'eu' or nothing." )
return()
}
}
#the default is that the grouping only happens by flow
grouping_by = "FlowTypeId"
if(endpoint == "rts"){
grouping_by = "FlowtypeId, GovRegionId"
}
if(!is.null(key_word)){
filter_crit = paste0(filter_crit, " and contains(SITC/",filter_agg,"Desc, '",key_word,"')")
}
#Country filter is not compulsory
if(!is.null(country_filter)){
if(nchar(trimws(country_filter)) == 2){
filter_crit <- paste0(filter_crit, " and Country/CountryCodeAlpha eq '", country_filter, "'")
} else {
print("Please use ISO2-Alpha country code e.g. 'FR'.")
return()
}
}
#flow filter also not compulsory
if(!is.null(flow_filter)){
flow_filter = tolower(flow_filter)
if(flow_filter == "import"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 1 or FlowTYpeId eq 3)")
} else if(flow_filter == "export"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 2 or FlowTYpeId eq 4)")
} else if(flow_filter == "eu"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 1 or FlowTYpeId eq 2)")
} else {
print("Ambiguous flow type please specify 'import', 'export', 'eu' or nothing." )
return()
}
}
#the default is that the grouping only happens by flow
grouping_by = "FlowTypeId"
if(endpoint == "rts"){
grouping_by = "FlowtypeId, GovRegionId"
}
if(!is.null(groupby)){
groupby = tolower(groupby)
if(length(intersect(c("sitc1", "sitc2", "sitc3", "sitc4"), groupby)) > 0 & endpoint == "ots"){
aggreg = intersect(c("sitc1", "sitc2", "sitc3", "sitc4"), groupby)
grouping_by <- paste0(grouping_by, ", SITC/", aggreg, "Code, SITC/", aggreg ,"Desc")
} else if(length(intersect(c("sitc1", "sitc2"), groupby)) > 0 & endpoint == "rts"){
aggreg = intersect(c("sitc1", "sitc2"), groupby)
grouping_by <- paste0(grouping_by, ", SITC/", aggreg, "Code, SITC/", aggreg ,"Desc")
}
if("country" %in% groupby){
grouping_by <- paste0(grouping_by, ", Country/CountryCodeAlpha")
}
if("year" %in% groupby){
grouping_by <- paste0(grouping_by, ", Date/Year")
}
if("month" %in% groupby){
grouping_by <- paste0(grouping_by, ", Date/MonthId")
}
#grouping_by <- paste0("Commodity/", aggreg, "Code, Commodity/", aggreg ,"Description, Country/CountryCodeAlpha, FlowTypeId")
}
#query <- "?$filter= MonthId gt 202000" # Can leave empty (max 30k rows)
#query <- "?$apply=filter(contains(SITC/SitcDesc, 'wood') and MonthId gt 202000 and MonthId lt 202100)/groupby((SITC/Sitc4Code, SITC/SitcDesc), aggregate(round(Value) with sum as SumValue))"
#query <- "?$apply=filter(contains(Commodity/Hs2Description, 'wood') and MonthId gt 202000 and MonthId lt 202100)/groupby((Commodity/Hs2Code, Commodity/Hs2Description, Country/CountryCodeAlpha), aggregate(round(Value) with sum as SumValue))"
query <- paste0("?$apply=filter(",
filter_crit,")/groupby((",
grouping_by,
"), aggregate(Value with sum as SumValue, Netmass with sum as weight_kg))&$count=true")
full_url <- paste0(base, endpoint, gsub(" ","%20", query))
message("Your query is : ", full_url)
req <- httr::GET(full_url)
json_content <- httr::content(req, as = "text", encoding = "UTF-8")
my_df <- jsonlite::fromJSON(json_content, flatten = TRUE) %>%
data.frame()
json_content
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_with_key_word_search(key_word = "cheese", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "rts", groupby = c("sitc4", "COUNTRY"))
key_word = "cheese"
filter_agg = "sitc2"
time_window = "MonthId eq 201901"
endpoint = "ots"
groupby = c("sitc4", "COUNTRY")
base <-"https://api.uktradeinfo.com/" #https://frontdoor-hmrcukti-uat.azurefd.net/"
endpoint = tolower(endpoint)
filter_agg = tolower(filter_agg)
#This is where you select "ots" for Overseas Trade Statistics and "rts" for Regional Trade statistics
if(!(endpoint %in% c("ots", "rts"))){
print("Choose endpoint value as 'ots' or 'rts' ")
return()
}
if(!(filter_agg %in% c("sitc1", "sitc2", "sitc3", "sitc4") & endpoint == "ots") & !(filter_agg %in% c("sitc1", "sitc2") & endpoint == "rts")){
print("Invalid product code format try again!")
return()
}
if( is.null(time_window)){
print("You have to specify a time window!")
return()
} else {
filter_crit = time_window #paste0(time_window, " and CommoditySITCId ge 0 and SuppressionIndex eq 0")
if(endpoint == "ots"){
filter_crit = paste0(time_window, " and CommoditySitcId ge 0 and SuppressionIndex eq 0")
}
}
if(!is.null(key_word)){
filter_crit = paste0(filter_crit, " and contains(SITC/",filter_agg,"Desc, '",key_word,"')")
}
#Country filter is not compulsory
if(!is.null(country_filter)){
if(nchar(trimws(country_filter)) == 2){
filter_crit <- paste0(filter_crit, " and Country/CountryCodeAlpha eq '", country_filter, "'")
} else {
print("Please use ISO2-Alpha country code e.g. 'FR'.")
return()
}
}
#flow filter also not compulsory
if(!is.null(flow_filter)){
flow_filter = tolower(flow_filter)
if(flow_filter == "import"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 1 or FlowTYpeId eq 3)")
} else if(flow_filter == "export"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 2 or FlowTYpeId eq 4)")
} else if(flow_filter == "eu"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 1 or FlowTYpeId eq 2)")
} else {
print("Ambiguous flow type please specify 'import', 'export', 'eu' or nothing." )
return()
}
}
flow_filter = NULL
#flow filter also not compulsory
if(!is.null(flow_filter)){
flow_filter = tolower(flow_filter)
if(flow_filter == "import"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 1 or FlowTYpeId eq 3)")
} else if(flow_filter == "export"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 2 or FlowTYpeId eq 4)")
} else if(flow_filter == "eu"){
filter_crit <- paste0(filter_crit, " and (FlowTypeId eq 1 or FlowTYpeId eq 2)")
} else {
print("Ambiguous flow type please specify 'import', 'export', 'eu' or nothing." )
return()
}
}
#the default is that the grouping only happens by flow
grouping_by = "FlowTypeId"
if(endpoint == "rts"){
grouping_by = "FlowtypeId, GovRegionId"
}
if(!is.null(groupby)){
groupby = tolower(groupby)
if(length(intersect(c("sitc1", "sitc2", "sitc3", "sitc4"), groupby)) > 0 & endpoint == "ots"){
aggreg = intersect(c("sitc1", "sitc2", "sitc3", "sitc4"), groupby)
grouping_by <- paste0(grouping_by, ", SITC/", aggreg, "Code, SITC/", aggreg ,"Desc")
} else if(length(intersect(c("sitc1", "sitc2"), groupby)) > 0 & endpoint == "rts"){
aggreg = intersect(c("sitc1", "sitc2"), groupby)
grouping_by <- paste0(grouping_by, ", SITC/", aggreg, "Code, SITC/", aggreg ,"Desc")
}
if("country" %in% groupby){
grouping_by <- paste0(grouping_by, ", Country/CountryCodeAlpha")
}
if("year" %in% groupby){
grouping_by <- paste0(grouping_by, ", Date/Year")
}
if("month" %in% groupby){
grouping_by <- paste0(grouping_by, ", Date/MonthId")
}
#grouping_by <- paste0("Commodity/", aggreg, "Code, Commodity/", aggreg ,"Description, Country/CountryCodeAlpha, FlowTypeId")
}
#query <- "?$filter= MonthId gt 202000" # Can leave empty (max 30k rows)
#query <- "?$apply=filter(contains(SITC/SitcDesc, 'wood') and MonthId gt 202000 and MonthId lt 202100)/groupby((SITC/Sitc4Code, SITC/SitcDesc), aggregate(round(Value) with sum as SumValue))"
#query <- "?$apply=filter(contains(Commodity/Hs2Description, 'wood') and MonthId gt 202000 and MonthId lt 202100)/groupby((Commodity/Hs2Code, Commodity/Hs2Description, Country/CountryCodeAlpha), aggregate(round(Value) with sum as SumValue))"
query <- paste0("?$apply=filter(",
filter_crit,")/groupby((",
grouping_by,
"), aggregate(Value with sum as SumValue, Netmass with sum as weight_kg))&$count=true")
full_url <- paste0(base, endpoint, gsub(" ","%20", query))
message("Your query is : ", full_url)
req <- httr::GET(full_url)
json_content <- httr::content(req, as = "text", encoding = "UTF-8")
my_df <- jsonlite::fromJSON(json_content, flatten = TRUE) %>%
data.frame()
json_content
message("Your query is : ", full_url)
full_url <- "https://api.uktradeinfo.com/ots?$apply=filter(MonthId%20eq%20201901%20and%20CommoditySitcId%20ge%200%20and%20SuppressionIndex%20eq%200%20and%20contains(SITC/sitc2Desc,%20'dairy'))/groupby((FlowTypeId,%20SITC/sitc4Code,%20SITC/sitc4Desc,%20Country/CountryCodeAlpha),%20aggregate(Value%20with%20sum%20as%20SumValue,%20Netmass%20with%20sum%20as%20weight_kg))&$count=true"
req <- httr::GET(full_url)
json_content <- httr::content(req, as = "text", encoding = "UTF-8")
my_df <- jsonlite::fromJSON(json_content, flatten = TRUE) %>%
data.frame()
df = dplyr::select(my_df, setdiff(colnames(my_df), "X.odata.nextLink"))
View(df)
json_content
full_url <- "https://api.uktradeinfo.com/ots?$apply=filter(MonthId%20eq%20201901%20and%20CommoditySitcId%20ge%200%20and%20SuppressionIndex%20eq%200%20and%20contains(SITC/sitc2Desc,%20'cheese'))/groupby((FlowTypeId,%20SITC/sitc4Code,%20SITC/sitc4Desc,%20Country/CountryCodeAlpha),%20aggregate(Value%20with%20sum%20as%20SumValue,%20Netmass%20with%20sum%20as%20weight_kg))&$count=true"
json_content <- httr::content(req, as = "text", encoding = "UTF-8")
json_content
req <- httr::GET(full_url)
json_content <- httr::content(req, as = "text", encoding = "UTF-8")
json_content
str_detect(json_content, "@odata.count\":0")
full_url <- "https://api.uktradeinfo.com/ots?$apply=filter(MonthId%20eq%20201901%20and%20CommoditySitcId%20ge%200%20and%20SuppressionIndex%20eq%200%20and%20contains(SITC/sitc2Desc,%20'dairy'))/groupby((FlowTypeId,%20SITC/sitc4Code,%20SITC/sitc4Desc,%20Country/CountryCodeAlpha),%20aggregate(Value%20with%20sum%20as%20SumValue,%20Netmass%20with%20sum%20as%20weight_kg))&$count=true"
req <- httr::GET(full_url)
json_content <- httr::content(req, as = "text", encoding = "UTF-8")
str_detect(json_content, "@odata.count\":0")
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_with_key_word_search(key_word = "cheese", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "ots", groupby = c("sitc4", "COUNTRY"))
call_sitc_hmrc_with_key_word_search(key_word = "dairy", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "ots", groupby = c("sitc4", "COUNTRY"))
call_sitc_hmrc_with_key_word_search(key_word = "dairy", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "ots", groupby = c("year", "COUNTRY")) -> out2
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_with_key_word_search(key_word = "dairy", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "ots", groupby = c("year", "COUNTRY")) -> out2
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_with_key_word_search(key_word = "dairy", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "ots", groupby = c("year", "COUNTRY")) -> out2
View(out2)
call_sitc_hmrc_with_key_word_search(key_word = "dairy", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "ots", groupby = c("sitc5", "COUNTRY")) -> out2
call_sitc_hmrc_with_key_word_search(key_word = "dairy", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "ots", groupby = c("sitc4", "COUNTRY")) -> out2
View(out2)
full_url <- "https://api.uktradeinfo.com/ots?$apply=filter(MonthId%20eq%20201901%20and%20CommoditySitcId%20ge%200%20and%20SuppressionIndex%20eq%200%20and%20contains(SITC/sitc2Desc,%20'dairy'))/groupby((FlowTypeId,%20SITC/sitc5Code,%20SITC/sitc5Desc,%20Country/CountryCodeAlpha),%20aggregate(Value%20with%20sum%20as%20SumValue,%20Netmass%20with%20sum%20as%20weight_kg))&$count=true"
req <- httr::GET(full_url)
json_content <- httr::content(req, as = "text", encoding = "UTF-8")
json_content
library(roxygen2)
roxygen2::roxygenise()
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs', groupby = c("country", "year", "month", "HS2")) -> eu_corr
View(eu_corr)
get_eu_estimates(time_window = "MonthId gt 202008", 'sitc', groupby = c("country", "year", "month")
)
get_eu_estimates(time_window = "MonthId gt 202008", code_type = 'sitc', groupby = c("country", "year", "month"))
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_filter='02', code_type = 'hs', groupby = c("country", "year", "month", "HS2")) -> eu_corr
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_filter='02', code_type = 'hs', groupby = c("month", "HS2"))
library(roxygen2)
devtools::document()
library(roxygen2)
devtools::document()
load_all()
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS4", "COUNTRY"))
call_hs_hmrc_ots_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("HS2", "COUNTRY"))
call_hs_hmrc_ots_with_key_word_search(filter_agg = "cn8", time_window = "MonthId eq 201901", groupby = c("hs4", "country"))
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS4", "COUNTRY"))
call_hs_hmrc_ots_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("HS2", "COUNTRY"))
-> out
call_hs_hmrc_ots_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("HS2", "COUNTRY"))-> out
call_hs_hmrc_ots_with_key_word_search(filter_agg = "cn8", time_window = "MonthId eq 201901", groupby = c("hs4", "country")) -> out
View(out)
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("CN8", "COUNTRY")) -> out
View(out)
call_sitc_hmrc_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", endpoint = "rts", groupby = c("sitc4", "COUNTRY")) -> out
View(out)
call_sitc_hmrc_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY")) -> out
View(out)
call_sitc_hmrc_with_key_word_search(key_word = "cheese", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "rts", groupby = c("sitc4", "COUNTRY")) -> out
call_sitc_hmrc_with_key_word_search(key_word = "diary", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "rts", groupby = c("sitc4", "COUNTRY")) -> out
call_sitc_hmrc_with_key_word_search(key_word = "diary", filter_agg = "sitc1", time_window = "MonthId eq 201901", endpoint = "rts", groupby = c("sitc4", "COUNTRY")) -> out
call_sitc_hmrc_with_key_word_search(key_word = "dairy", filter_agg = "sitc2", time_window = "MonthId eq 201901", endpoint = "rts", groupby = c("sitc4", "COUNTRY")) -> out
call_sitc_hmrc_with_key_word_search(filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY"))->out
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", 'hs2', groupby = c("country", "year", "HS2")
)
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs2', groupby = c("country", "year", "HS2"))
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs', groupby = c("country", "year", "HS2"))
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_filter='02', code_type = 'hs', groupby = c("month", "HS2")) -> out
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs', groupby = c("country", "year", "HS2")) -> out
get_eu_estimates(time_window = "MonthId gt 202008", code_type = 'sitc', groupby = c("country", "year", "month")) -> out

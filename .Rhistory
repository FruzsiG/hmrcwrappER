if (i > 6) {
i <- 0  # No more pages
message("ERROR: Process stopped as this query results in more than 200,000 rows.\nRewrite your query.")
}
}
# Convert list to dataframe, remove NA columns and recode
df <- bind_rows(apidata) %>%
select(-contains("@odata.id")) %>%
mutate(FlowTypeId = dplyr::case_when(FlowTypeId == 1 ~ "EU Imports",
FlowTypeId == 2 ~ "EU Exports",
FlowTypeId == 3 ~ "Non-EU Imports",
FlowTypeId == 4 ~ "Non-EU Exports"))
return(df)
}
add_region_name <- function(df){
full_url = "https://api.uktradeinfo.com/Region"
req <- httr::GET(gsub(" ", "%20", full_url))
json_content <- httr::content(req, as = "text", encoding = "UTF-8") %>%
jsonlite::fromJSON(flatten = TRUE)
ref <- json_content$value
new_df <- left_join(df,ref , by = c("GovRegionId" = "RegionId"))
return(new_df)
}
# make_api_estimates <- function() {
#   message("Extracting EU Estimates from HMRC's API - please wait")
#
#   # EU Estimate Query options
#   endpoint <- "https://api.uktradeinfo.com/ots"
#   custom_query <- '$apply=filter(MonthId gt 200900 and (CommodityId lt 0 or CommoditySitcId lt -1))'
#
#   # PLACEHOLDER FOR GENERIC CODE THAT QUERIES THE API
#   apidata <- hmrc_api_requester(paste0(endpoint, custom_query))
#
#
#   # Clean and rename variables
#   apidata <- apidata %>%
#     mutate(year = substr(month_id, 1, 4),
#            month = substr(month_id, 5, 6),
#            eu = TRUE,
#            flow_type_id = case_when(flow_type_id %in% c(1,3) ~ "Imports",
#                                     flow_type_id %in% c(2,4) ~ "Exports",
#                                     TRUE ~ ""),
#            country_code = "Estimate",
#            code_group = 3, # Distinguishes these rows from  BTTA[1], Suppressed[2], and normal codes[0]
#            special_flag = "Y",
#            general_flag = "Y",
#            source_data = "API",
#            source_yymm = paste0(substr(Sys.Date(), 3, 4), substr(Sys.Date(), 6, 7))) %>%
#     select(year, month, eu, country_code, source_data, source_yymm, code_group, special_flag, general_flag, value,
#            flow = flow_type_id,
#            hs2 = commodity_id,
#            sitc2 = commodity_sitc_id)
#
#
#   # Split into Hs2 and SITC2
#   euest_hs2 <- apidata %>%
#     filter(hs2 < 0) %>%
#     mutate(hs2 = sprintf("%02d", hs2/-10),
#            hs4 = paste0(hs2, "--"),
#            hs6 = paste0(hs2, "----"),
#            commodity_code = paste0(hs2, "------")) %>%
#     select(-sitc2)
#
#   euest_sitc2 <- apidata %>%
#     filter(sitc2 < -1) %>%
#     mutate(sitc2 = ifelse(sitc2 == -9, 0, sitc2),
#            sitc2 = sprintf("%02d", sitc2/-10),
#            sitc1 = substr(sitc2, 1, 1),
#            sitc3 = paste0(sitc2, "-"),
#            sitc4 = paste0(sitc2, "--"),
#            sitc = paste0(sitc2, "---")) %>%
#     select(-hs2)
#
#
# }
#
#
#
# Libraries you will need
for (i in c("dplyr","stringr","httr", "jsonlite", "htmlTable")) {
if (i %in% rownames(installed.packages())) {
library(i, character.only = TRUE)
} else {
install.packages(i)
library(i, character.only = TRUE)
}
}
library(dplyr)
library(stringr)
library(httr)
library(jsonlite)
library(htmlTable)
for (i in c("dplyr","stringr","httr", "jsonlite", "htmlTable")) {
if (i %in% rownames(installed.packages())) {
library(i, character.only = TRUE)
} else {
install.packages(i)
library(i, character.only = TRUE)
}
}
library(dplyr)
library(stringr)
library(httr)
library(jsonlite)
library(htmlTable)
call_sitc_hmrc_rts_with_key_word_search <- function(time_window = NULL, # like "MonthId gt 202000 and MonthId lt 202100" which is everything from 2020 or "MonthId gt 201908 and MonthId lt 202009" last 12 month up to end of August
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS4", "COUNTRY"))
# EU Estimate Query options
endpoint <- "https://api.uktradeinfo.com/ots"
custom_query <- '$apply=filter(MonthId gt 200900 and (CommodityId lt 0 or CommoditySitcId lt -1))'
# PLACEHOLDER FOR GENERIC CODE THAT QUERIES THE API
apidata <- hmrc_api_requester(paste0(endpoint, custom_query))
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
# EU Estimate Query options
endpoint <- "https://api.uktradeinfo.com/ots"
custom_query <- '$apply=filter(MonthId gt 200900 and (CommodityId lt 0 or CommoditySitcId lt -1))'
make_api_estimates <- function() {
message("Extracting EU Estimates from HMRC's API - please wait")
# EU Estimate Query options
endpoint <- "https://api.uktradeinfo.com/ots"
custom_query <- '?$apply=filter(MonthId gt 200900 and (CommodityId lt 0 or CommoditySitcId lt -1))'
# PLACEHOLDER FOR GENERIC CODE THAT QUERIES THE API
apidata <- hmrc_api_requester(paste0(endpoint, custom_query))
# Clean and rename variables
apidata <- apidata %>%
mutate(year = substr(month_id, 1, 4),
month = substr(month_id, 5, 6),
eu = TRUE,
flow_type_id = case_when(flow_type_id %in% c(1,3) ~ "Imports",
flow_type_id %in% c(2,4) ~ "Exports",
TRUE ~ ""),
country_code = "Estimate",
code_group = 3, # Distinguishes these rows from  BTTA[1], Suppressed[2], and normal codes[0]
special_flag = "Y",
general_flag = "Y",
source_data = "API",
source_yymm = paste0(substr(Sys.Date(), 3, 4), substr(Sys.Date(), 6, 7))) %>%
select(year, month, eu, country_code, source_data, source_yymm, code_group, special_flag, general_flag, value,
flow = flow_type_id,
hs2 = commodity_id,
sitc2 = commodity_sitc_id)
# Split into Hs2 and SITC2
euest_hs2 <- apidata %>%
filter(hs2 < 0) %>%
mutate(hs2 = sprintf("%02d", hs2/-10),
hs4 = paste0(hs2, "--"),
hs6 = paste0(hs2, "----"),
commodity_code = paste0(hs2, "------")) %>%
select(-sitc2)
euest_sitc2 <- apidata %>%
filter(sitc2 < -1) %>%
mutate(sitc2 = ifelse(sitc2 == -9, 0, sitc2),
sitc2 = sprintf("%02d", sitc2/-10),
sitc1 = substr(sitc2, 1, 1),
sitc3 = paste0(sitc2, "-"),
sitc4 = paste0(sitc2, "--"),
sitc = paste0(sitc2, "---")) %>%
select(-hs2)
}
make_api_estimates()
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
make_api_estimates()
message("Extracting EU Estimates from HMRC's API - please wait")
# EU Estimate Query options
endpoint <- "https://api.uktradeinfo.com/ots"
custom_query <- '?$apply=filter(MonthId gt 200900 and (CommodityId lt 0 or CommoditySitcId lt -1))&$count=true'
# PLACEHOLDER FOR GENERIC CODE THAT QUERIES THE API
apidata <- hmrc_api_requester(paste0(endpoint, custom_query))
View(apidata)
unique(apidata$CommoditySitcId)
time_window = "MonthId gt 201906 and MonthId lt 202008"
code_type = 'hs'
groupby = c("country", "year", "HS2")
code_filter = NULL
flow_filter = "eu"
base <-"https://api.uktradeinfo.com/"
endpoint = "ots"
if(is.null(flow_filter)){
flow_filter = "eu"
} else{
flow_filter = tolower(flow_filter)
}
if(code_type == 'hs'){
#Please note EU estimates only apply on the HS2 level and to the whole of the EU
query <- paste0("?$apply=filter(",
time_window, " and CommodityId lt 0)&$count=true")
} else if(code_type == 'sitc'){
query <- paste0("?$apply=filter(",
time_window, " and CommoditySitcId lt -1)&$count=true")
}
full_url <- paste0(base, endpoint, gsub(" ","%20", query))
message("Your query is : ", full_url)
my_df <- hmrc_api_requester(full_url)
View(my_df)
call_sitc_hmrc_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", endpoint = "ots", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY")) ->outsitc
View(outsitc)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS4", "COUNTRY"))->out
View(out)
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS2", "year"))->out
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS2", "year"))->out
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS2", "year"))->out
View(out)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs', groupby = c("country", "year", "HS2"))
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs', groupby = c("country", "year", "HS2")) -> eu_cor
View(eu_cor)
full_url <- "https://api.uktradeinfo.com/ots?$apply=filter(MonthId%20gt%20201906%20and%20MonthId%20lt%20202008%20and%20CommodityId%20lt%200)&$count=true"
i <- 1
pagination <- NULL  # HMRC API will only return upto 30,000 records per page
apidata <- list()
req <- httr::GET(gsub(" ", "%20", paste0(full_url, pagination)))
# Extract content (in json format)
json_content <- httr::content(req, as = "text", encoding = "UTF-8") %>%
jsonlite::fromJSON(flatten = TRUE)
#check if call worked
if(json_content$`@odata.count` == 0){
print("Keyword resulted in 0 lines try a different keyword")
return()
}
# Add page data to the list
apidata[[i]] <- json_content$value
# Check for more pages
if (nrow(json_content$value) == 30000) {
pagination <- paste0("&$skip=", i * 30000)
i <- i + 1
} else {
i <- 0  # No more pages
}
# Prevent downloading too many rows
if (i > 6) {
i <- 0  # No more pages
message("ERROR: Process stopped as this query results in more than 200,000 rows.\nRewrite your query.")
}
# Convert list to dataframe, remove NA columns and recode
df <- bind_rows(apidata) #%>%
View(df)
str(df)
# Convert list to dataframe, remove NA columns and recode
df <- bind_rows(apidata) %>%
select(-contains("@odata.id")) %>%
mutate(FlowTypeId = dplyr::case_when(FlowTypeId == 1 ~ "EU Imports",
FlowTypeId == 2 ~ "EU Exports",
FlowTypeId == 3 ~ "Non-EU Imports",
FlowTypeId == 4 ~ "Non-EU Exports"))
View(df)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs', groupby = c("country", "year", "HS2")) -> eu_cor
View(eu_cor)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs', groupby = c("country", "year", "HS2"))-> eu_corr
View(eu_corr)
groupby = c("country", "year", "HS2")
code_type = 'hs'
time_window = "MonthId gt 201906 and MonthId lt 202008"
code_filter = NULL
flow_filter = "eu"
base <-"https://api.uktradeinfo.com/"
endpoint = "ots"
if(is.null(flow_filter)){
flow_filter = "eu"
} else{
flow_filter = tolower(flow_filter)
}
if(code_type == 'hs'){
#Please note EU estimates only apply on the HS2 level and to the whole of the EU
query <- paste0("?$apply=filter(",
time_window, " and CommodityId lt 0)&$count=true")
} else if(code_type == 'sitc'){
query <- paste0("?$apply=filter(",
time_window, " and CommoditySitcId lt -1)&$count=true")
}
full_url <- paste0(base, endpoint, gsub(" ","%20", query))
message("Your query is : ", full_url)
my_df <- hmrc_api_requester(full_url)
View(my_df)
#my_df  <- json_content$value
the_string = c("FlowTypeId")
if(!is.null(groupby)){
groupby <- tolower(groupby)
if(length(intersect(c("hs2"), groupby)) > 0){
my_df %>% dplyr::mutate(Commodity.Hs2Code = sprintf("%02d",CommodityId*(-0.1))) -> my_df
if(!is.null(code_filter)){
my_df %>% dplyr::filter(Commodity.Hs2Code %in% code_filter) -> my_df
}
the_string <- c(the_string, "Commodity.Hs2Code")
}
if(length(intersect(c("sitc2"), groupby)) > 0){
my_df %>% dplyr::mutate(SITC.Sitc2Code = sprintf("%02d",CommoditySitcId*(-0.1))) -> my_df
if(!is.null(code_filter)){
my_df %>% dplyr::filter(SITC.Sitc2Code  %in% code_filter) -> my_df
}
the_string <- c(the_string, "SITC.Sitc2Code")
}
if("country" %in% groupby){
my_df %>% dplyr::mutate(Country.CountryCodeAlpha = "EU_Estimate") -> my_df
the_string <- c(the_string, "Country.CountryCodeAlpha")
}
if("year" %in% groupby){
my_df %>% dplyr::mutate(Date.Year = str_sub(MonthId, 1,4)) -> my_df
the_string <- c(the_string, "Date.Year")
}
if("month" %in% groupby){
my_df %>% dplyr::mutate(Date.MonthId = MonthId)-> my_df
the_string <- c(the_string, "Date.MonthId")
}
}
print(flow_filter)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs', groupby = c("country", "year", "HS2"))-> eu_corr
View(eu_corr)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS4", "COUNTRY")) -> out1
call_hs_hmrc_ots_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("HS2", "COUNTRY")) ->out2
View(out1)
View(out2)
call_hs_hmrc_ots_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", flow_filter = "EXport", groupby = c("HS2", "COUNTRY")) ->out2
call_hs_hmrc_ots_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", flow_filter = "EXport") ->out2
call_hs_hmrc_ots_with_product_code(time_window = "MonthId gt 202012", flow_filter = "EXport") ->out2
60922153085 + 76251490862
60922153085 + 99159555
call_hs_hmrc_ots_with_key_word_search(filter_agg = "cn8", time_window = "MonthId eq 201901", groupby = c("hs4", "country")) ->out3
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("CN8", "COUNTRY")) -> out4
View(out4)
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc4", "COUNTRY"))
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc4", "COUNTRY")) -> out5
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc2", "COUNTRY")) -> out6
View(out6)
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc2", "year")) -> out6
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc2", "year")) -> out6
View(out6)
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc1", "year")) -> out6
View(out6)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc1", "year")) -> out6
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc1", "year")) -> out6
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc1", "year")) -> out6
View(out6)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc1", "year")) -> out6
View(out6)
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId gt 202012", groupby = c("sitc1", "year")) -> out6
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId gt 202012", groupby = c("sitc1", "year")) -> out6
View(out6)
View(out6)
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId gt 202012", groupby = c("sitc2", "year")) -> out6
View(out6)
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId gt 202012", groupby = c("sitc2", "year")) -> out6
View(out6)
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId gt 202012", groupby = c("sitc1", "year")) -> out6
call_sitc_hmrc_ots_with_product_code(filter_for_code = "0", time_window = "MonthId gt 202012", groupby = c("sitc1", "year")) -> out6
call_sitc_hmrc_ots_with_product_code(filter_for_code = "0", time_window = "MonthId gt 202012", groupby = c("sitc2", "year")) -> out6
View(out6)
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId gt 202012", groupby = c("sitc1", "year")) -> out6
filter_for_code = "02"
time_window = "MonthId gt 202012"
groupby = c("sitc1", "year")
flow_filter = "eu"
code_type = "sitc"
base <-"https://api.uktradeinfo.com/"
endpoint = "ots"
if(is.null(flow_filter)){
flow_filter = "eu"
} else{
flow_filter = tolower(flow_filter)
}
if(code_type == 'hs'){
#Please note EU estimates only apply on the HS2 level and to the whole of the EU
query <- paste0("?$apply=filter(",
time_window, " and CommodityId lt 0)&$count=true")
} else if(code_type == 'sitc'){
query <- paste0("?$apply=filter(",
time_window, " and CommoditySitcId lt -1)&$count=true")
}
full_url <- paste0(base, endpoint, gsub(" ","%20", query))
message("Your query is : ", full_url)
my_df <- hmrc_api_requester(full_url)
View(my_df)
the_string = c("FlowTypeId")
groupby <- tolower(groupby)
if(length(intersect(c("hs2"), groupby)) > 0){
my_df %>% dplyr::mutate(Commodity.Hs2Code = sprintf("%02d",CommodityId*(-0.1))) -> my_df
if(!is.null(code_filter)){
my_df %>% dplyr::filter(Commodity.Hs2Code %in% code_filter) -> my_df
}
the_string <- c(the_string, "Commodity.Hs2Code")
}
my_df %>% dplyr::mutate(SITC.Sitc2Code = sprintf("%02d",floor(CommoditySitcId*(-0.1))))%>%
dplyr::mutate(SITC.Sitc1Code = sprintf("%01d",floor(CommoditySitcId*(-0.01))))-> my_df
View(my_df)
if(length(intersect(c("sitc2"), groupby)) > 0){
the_string <- c(the_string, "SITC.Sitc2Code")
} else{
the_string <- c(the_string, "SITC.Sitc1Code")
}
if("country" %in% groupby){
my_df %>% dplyr::mutate(Country.CountryCodeAlpha = "EU_Estimate") -> my_df
the_string <- c(the_string, "Country.CountryCodeAlpha")
}
if("year" %in% groupby){
my_df %>% dplyr::mutate(Date.Year = str_sub(MonthId, 1,4)) -> my_df
the_string <- c(the_string, "Date.Year")
}
if("month" %in% groupby){
my_df %>% dplyr::mutate(Date.MonthId = MonthId)-> my_df
the_string <- c(the_string, "Date.MonthId")
}
if(!is.null(groupby)){
groupby <- tolower(groupby)
if(length(intersect(c("hs2"), groupby)) > 0){
my_df %>% dplyr::mutate(Commodity.Hs2Code = sprintf("%02d",CommodityId*(-0.1))) -> my_df
if(!is.null(code_filter)){
my_df %>% dplyr::filter(Commodity.Hs2Code %in% code_filter) -> my_df
}
the_string <- c(the_string, "Commodity.Hs2Code")
}
if(length(intersect(c("sitc1", "sitc2"), groupby)) > 0){
my_df %>% dplyr::mutate(SITC.Sitc2Code = sprintf("%02d",floor(CommoditySitcId*(-0.1))))%>%
dplyr::mutate(SITC.Sitc1Code = sprintf("%01d",floor(CommoditySitcId*(-0.01))))-> my_df
if(!is.null(code_filter)){
if(nchar(code_filter) == 2){
my_df %>% dplyr::filter(SITC.Sitc2Code  %in% code_filter) -> my_df
}else if(nchar(code_filter) == 1){
my_df %>% dplyr::filter(SITC.Sitc1Code  %in% code_filter) -> my_df
}
}
if(length(intersect(c("sitc2"), groupby)) > 0){
the_string <- c(the_string, "SITC.Sitc2Code")
} else{
the_string <- c(the_string, "SITC.Sitc1Code")
}
}
if("country" %in% groupby){
my_df %>% dplyr::mutate(Country.CountryCodeAlpha = "EU_Estimate") -> my_df
the_string <- c(the_string, "Country.CountryCodeAlpha")
}
if("year" %in% groupby){
my_df %>% dplyr::mutate(Date.Year = str_sub(MonthId, 1,4)) -> my_df
the_string <- c(the_string, "Date.Year")
}
if("month" %in% groupby){
my_df %>% dplyr::mutate(Date.MonthId = MonthId)-> my_df
the_string <- c(the_string, "Date.MonthId")
}
}
code_filter = "02"
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_sitc_hmrc_ots_with_product_code(filter_for_code = "0", time_window = "MonthId gt 202012", groupby = c("sitc2", "year")) -> out6
View(out6)
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId gt 202012", groupby = c("sitc1", "year")) -> out6
1081643116 + 30234243
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
source('C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER/R/HMRC_API.R')
call_hs_hmrc_ots_with_product_code(time_window = "MonthId eq 201901", flow_filter = "EU", groupby = c("HS4", "COUNTRY"))-> out1
call_hs_hmrc_ots_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("HS2", "COUNTRY")) -> out2
call_hs_hmrc_ots_with_key_word_search(filter_agg = "cn8", time_window = "MonthId eq 201901", groupby = c("hs4", "country"))-> out3
call_hs_hmrc_ots_with_key_word_search(key_word = "cheese", filter_agg = "hs4", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("CN8", "COUNTRY"))->out4
call_sitc_hmrc_ots_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc4", "COUNTRY"))->out5
call_sitc_hmrc_ots_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY"))->out6
call_sitc_hmrc_ots_with_key_word_search(key_word = "dairy", filter_agg = "sitc2", time_window = "MonthId eq 201901", groupby = c("sitc4", "COUNTRY"))->out7
View(out4)
call_sitc_hmrc_ots_with_key_word_search(filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY")) -> out8
call_sitc_hmrc_ots_with_key_word_search(filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY")) -> out9
View(out9)
View(out8)
call_sitc_hmrc_ots_with_key_word_search(filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", flow_filter = "EXport", groupby = c("SITc2", "year")) -> out9
View(out9)
call_sitc_hmrc_rts_with_product_code(filter_for_code = "02", time_window = "MonthId eq 201901", groupby = c("sitc4", "COUNTRY")) -> out10
call_sitc_hmrc_rts_with_product_code(time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY"))-> out11
call_sitc_hmrc_rts_with_key_word_search(key_word = "dairy", filter_agg = "sitc2", time_window = "MonthId eq 201901", groupby = c("sitc4", "COUNTRY")) -> out12
call_sitc_hmrc_rts_with_key_word_search(filter_agg = "sitc1", time_window = "MonthId gt 201906 and MonthId lt 202008", country_filter = "FR", flow_filter = "EXport", groupby = c("SITc2", "COUNTRY"))-> out13
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_type = 'hs', groupby = c("country", "year", "HS2")) -> out14
get_eu_estimates(time_window = "MonthId gt 201906 and MonthId lt 202008", code_filter='02', code_type = 'hs', groupby = c("month", "HS2"))->out15
get_eu_estimates(time_window = "MonthId gt 202008", code_type = 'sitc', groupby = c("country", "year", "month"))->out16
hmrc_api_requester("https://api.uktradeinfo.com/ots?$apply=filter(MonthId gt 202008 and CommoditySitcId lt -1)&$count=true")
devtools::document()
getwd()
install.packages("C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER")
install.packages("C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER")
install.packages("C:/Users/gajdosf/Department for International Trade/Macro Analysis and Statistics - 14. Data Science Data Exploitation/Projects/HMRC API wrapper/hmrcwrappER", repos = NULL, type = 'source')
install.packages("C:/Users/gajdosf/Downloads/hmrcwrappER-main.zip", repos = NULL, type = 'source')
install.packages("C:/Users/gajdosf/Downloads/hmrcwrappER-main.zip", repos = NULL, type = 'source', lib = "C:/Users/gajdosf/Downloads/")
library("Rtools")
install.packages("Rtools")
install.packages("rtools")
install.packages("C:/Users/gajdosf/Downloads/hmrcwrappER-main.zip", repos = NULL, type = 'source')
install.packages("rtools")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(hmrcwrappeR)
?hmrcwrappeR
library("C:/Users/gajdosf/Downloads/hmrcwrappeR")
library(hmrcwrappeR, lib.loc = "C:/Users/gajdosf/Downloads/")
?hmrcwrappeR
?`hmrcwrappeR-package`
install.packages("C:/Users/gajdosf/Downloads/hmrcwrappER-main.zip", repos = NULL, type = 'source')
version
install.packages("C:/Users/gajdosf/Downloads/hmrcwrappER-main.zip", repos = NULL, type = 'source')
install.packages('remotes')
library(remotes)
install_git("https://github.com/FruzsiG/hmrcwrappER.git")
library(hmrcwrappeR)
library(hmrcwrappER)
installed.packages()
installed.packages()->my_packs
View(my_packs)
